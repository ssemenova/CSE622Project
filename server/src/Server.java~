import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfKeyPoint;
import org.opencv.core.CvType;
import org.opencv.core.Scalar;
import org.opencv.features2d.ORB;
import org.opencv.imgproc.Imgproc;
import org.opencv.core.Point;
import org.opencv.core.Size;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.features2d.Features2d;
import org.opencv.highgui.HighGui;

import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.IOException;
import java.io.File;
import javax.imageio.ImageIO;

class Server {

    static{ System.loadLibrary(Core.NATIVE_LIBRARY_NAME); }

    public static void main(String[] args) {
	Mat image = readImage("/home/sofiya/repos/CSE622Project/server/testImages/test1.jpeg");
	getORBDescriptorsForImage(image); 

    }

    public static Mat readImage(String imagePath) {
        return Imgcodecs.imread(imagePath);
    }

    public static void getORBDescriptorsForImage(Mat image) {
	ORB orb = ORB.create();
	MatOfKeyPoint keypoints = new MatOfKeyPoint();
	Mat descriptors = new Mat();
	orb.detectAndCompute(image, new Mat(), keypoints, descriptors);

	Mat outputImage = new Mat();
	Features2d.drawKeypoints(image, keypoints, outputImage);
	try {
	    ImageIO.write(matToBufferedImage(outputImage), "png", new File("image1.png"));
	} catch(IOException e) {
	}
    }

   private static BufferedImage matToBufferedImage(Mat m) {
    if (!m.empty()) {
        int type = BufferedImage.TYPE_BYTE_GRAY;
        if (m.channels() > 1) {
            type = BufferedImage.TYPE_3BYTE_BGR;
        }
        int bufferSize = m.channels() * m.cols() * m.rows();
        byte[] b = new byte[bufferSize];
        m.get(0, 0, b);
        BufferedImage image = new BufferedImage(m.cols(), m.rows(), type);
        final byte[] targetPixels = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
        System.arraycopy(b, 0, targetPixels, 0, b.length);
        return image;
    }
    
    return null;
   }
}
